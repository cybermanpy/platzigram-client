'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');
const nock = require('nock');
const platzigram = require('../');
const fixtures = require('./fixtures');

let options = {
  endpoints: {
    pictures: 'http://platzigram.test/picture',
    users: 'http://platzigram.test/user',
    auth: 'http://platzigram.test/auth'
  }
};

test.beforeEach(t => {
  t.context.client = platzigram.createClient(options);
});

test('client', t => {
  const client = t.context.client;

  t.is(typeof client.getPicture, 'function');
  t.is(typeof client.savePicture, 'function');
  t.is(typeof client.likePicture, 'function');
  t.is(typeof client.listPictures, 'function');
  t.is(typeof client.listPicturesByTag, 'function');
  t.is(typeof client.saveUser, 'function');
  t.is(typeof client.getUser, 'function');
  t.is(typeof client.auth, 'function');
});

test('getPicture', (() => {
  var _ref = _asyncToGenerator(function* (t) {
    const client = t.context.client;

    let image = fixtures.getImage();

    nock(options.endpoints.pictures).get(`/${image.publicId}`).reply(200, image);

    let result = yield client.getPicture(image.publicId);

    t.deepEqual(image, result);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());
//# sourceMappingURL=/var/www/html/platzigram-client/node_modules/.cache/ava/f36743731658c08fe854073dda7ac1e6.js.map